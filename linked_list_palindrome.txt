#include <iostream>
#include <stack>
using namespace std;

// Data Structure to store a linked list node
struct Node {
	int data;
	Node* next;

	Node(int i)
	{
		this->data = i;
		this->next = NULL;
	}
};

// Function to determine if a given linked list is a palindrome or not
bool isPalindrome(Node* head)
{
	// construct an empty stack
	stack<int> s;

	// push all elements of the linked list into the stack
	Node* node = head;
	while (node) {
		s.push(node->data);
		node = node->next;
	}

	// traverse the linked list again
	node = head;
	while (node)
	{
		// pop the top element from the stack
		int top = s.top();
		s.pop();

		// compare the popped element with current node's data
		// return false if mismatch happens
		if (top != node->data)
			return false;

		// advance to the next node
		node = node->next;
	}

	// we reach here only when the linked list is a palindrome
	return true;
}

// main function
int main()
{
	Node* head = new Node(1);
	head->next = new Node(2);
	head->next->next = new Node(3);
	head->next->next->next = new Node(2);
	head->next->next->next->next = new Node(1);

	if (isPalindrome(head))
		cout << "Linked List is a palindrome.";
	else
		cout << "Linked List is not a palindrome.";

	return 0;
}
